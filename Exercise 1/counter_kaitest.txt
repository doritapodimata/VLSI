module counter(clock,reset,c0,c1);

input clock,reset;
output [3:0] c0;
output [3:0] c1;

reg [3:0] c0value;
reg [3:0] c1value;

wire[3:0] mux0,c1plus,c0plus;
wire comparator;

assign c1plus=c1value+1;

assign comparator=(c0value==4'd15)?1:0;
assign mux0=(comparator)?c1value:c0value;

assign c0plus=mux0+1;

always @(posedge clock or negedge reset) begin
if(reset==1'b0)c0value=4'b0;
else c0value<=c0plus;
end

always@(posedge clock or negedge reset) begin
if(reset==1'b0)c1value=4'b0;
else  c1value=(comparator)?c1plus:c1value;
end

assign c1=c1value;
assign c0=c0value;
endmodule

module test;
 
    parameter delay=5;

    
reg clock,reset;  
    reg check;
    wire [3:0]    out0,out1;
    integer i,j=0;
  
    counter DUT (
        .clock(clock),
        .reset(reset),
        .c0(out0),
		.c1(out1));

    initial begin
		reset<=0;
		clock<=0;
		#(delay) reset=1;
        for(i=0;i<16;i=i+1) begin
		for(j=i;j<16;j=j+1)begin
             #(delay) clock=1;
             #(delay)  clock=0;
             
             if (out0 == j&& out1==i) check=1'b1;
             else check=1'bX;
             
             end
        end
    end


endmodule


module test;
 
    parameter delay=5;

    
reg clock,reset;  
    reg check;
    wire [3:0]    out0,out1;
    reg[3:0] i,j;
  
    counter DUT (
                        .clock(clock),
                        .reset(reset),
                        .c0(out0),
			.c1(out1)
                     );

    initial begin
		reset=0;
		clock=0;
		j=0;
		i=0;
		#(delay) reset=1;

		forever
		 #5 clock<=~clock;
		end

initial
begin     
	forever begin
		@(posedge clock) begin
		if(i==15&&j!=15)begin
			j=j+1;
			i=j;
		end
		else if(j==15)begin
			i=0;
			j=0;
		end
		else if(i!=15) i=i+1;
		
		#1
		if(i==out0&&j==out1)
		check=1'b1;
		else
		 check=1'bx;
    
		end
	end
end
endmodule


