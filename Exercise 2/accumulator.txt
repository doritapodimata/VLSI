module accumulator #(parameter k=4, parameter n=8, parameter m=$clog2(k))(input [k*n-1:0] data, input pl, input clk, input rstn, output ready, output [n+m-1:0] sum);
genvar gi;
reg [k*n-1:0] register;
wire add;
reg [n+m-1:0] result;
reg [m:0] counter;
reg r;

always @(posedge clk or negedge rstn)begin
	if(rstn==0)
		register<=0;
	else begin
		if(add)
			register<=register>>n;
		else begin
			if(pl)
			register<=data;
		end
	end
end

always @(posedge clk or negedge rstn)begin
	if(rstn==0||(pl==1&&counter==0))
		result<=0;
	else begin
		if(add)
			result=result+register[n-1:0];
	end
end

always @(posedge clk or negedge rstn)begin
	if(rstn==0)
		counter<=0;
	else begin
		if(counter!=0&&add==1)
			counter<=counter-1;
		else if(pl)
			counter<=k;
	end
end

always @(posedge clk or negedge rstn)begin
	if(rstn==0)
		r<=0;

	else begin
	if(counter==0)
		r<=0;
	else
		r<=1;
	end
end

assign add=r;
assign ready=(counter==0)?1:0;
assign sum=result;

endmodule



module acctb;

reg [31:0] data, test;
reg clk,pl,rstn;
reg check;
wire [31:0] in;
wire [1:0] out;
wire ready;
reg [31:0] expected_sum;

assign in = {data[0],data[1],data[2],data[3],data[4],data[5],data[6]};
integer i=0;

accumulator #(.k(4), .n(8), .m(2)) acc (
     .data(in), .pl(pl), .clk(clk), .rstn(rstn), .ready(ready), .sum(out));

always #5 clk=~clk;

initial begin

rstn<=0;
clk<=0;
#5 rstn=1;
pl<=1;
//#10 pl<=0;

    repeat(10)@(posedge clk) begin
		 for(i=0;i<7;i=i+1)begin
			data[i]=$random;
            #1 test=test>>1;
		    test[7]<=out;
			end

    // Calculate expected sum
        #1  for(i=0; i<7; i=i+1) begin
            expected_sum = expected_sum + data[i-1:0];
        end

        if(expected_sum!=acc.sum) //compare or data[out]
            check=1'bx;
        else begin
           check=1'b1; 
        end
	end
end

endmodule

/*
module accumulator #(parameter k=4, parameter n=8, parameter m=$clog2(k))(input [k*n-1:0] data, input pl, input clk, input rstn, output ready, output [n+m-1:0] sum);
genvar gi;
reg [k*n-1:0] register;
wire add;
reg [n+m-1:0] result;
reg [m:0] counter;
reg r;

always @(posedge clk or negedge rstn)begin
	if(rstn==0)
		register<=0;
	else begin
		if(add)
			register<=register>>n;
		else begin
			if(pl)
			register<=data;
		end
	end
end

always @(posedge clk or negedge rstn)begin
	if(rstn==0)
		result<=0;
	else begin
		if(pl==1&&counter==0)
			result<=0;
		else
		if(add==1)
			result<=result+register[n-1:0];
	end
end

always @(posedge clk or negedge rstn)begin
	if(rstn==0)
		counter<=0;
	else begin
		if(counter!=0&&add==1)
			counter<=counter-1;
		else if(pl)
			counter<=k;
	end
end

always @(posedge clk or negedge rstn)begin
	if(rstn==0)
		r<=0;

	else begin
	if(counter==0)
		r<=0;
	else
		r<=1;
	end
end

assign add=r;
assign ready=(counter==0)?1:0;
assign sum=result;

endmodule

*/