module shift_register # (parameter n=8)(input si,pl,en,clk,rstn, input [n-1:0] din, output reg so);
	
	reg [n-1:0] register;

	always @(posedge clk or negedge rstn) begin
		if(rstn==0)begin
		register<=0;
		end
	else if(pl==1)begin
		register<=din;
		end
	else if(en==1)begin
		so<=register[0];
		register<=register>>1;
		register[n-1]<=si;
	end
	end
endmodule
		
			
module shifttb;
	
	reg [7:0] data, test;
	reg clk, en, rstn, pl, si;
	reg check;
	wire so;	

	shift_register #(8) shift (.si(si),.pl(pl),.en(en),.clk(clk),.rstn(rstn),.din(data),.so(so));

	always #5 clk=~clk;

	initial begin 
	clk<=0;
	rstn<=0;
	en<=0;
	pl<=1;
	si<=0;

	data<=8'h2c;
	test<=8'h00;

	#5 rstn=1;
	#10 pl=0;
	en=1;

	repeat(8)@(posedge clk) begin
		#1 test=test>>1;
		test[7]<=so;
	end

	if(data==test)
		check<=1;
	else
		check<=1'bx;
		
	end
endmodule 

