module rca
#(
  parameter width = 9
)(
  input  [width-1:0] a_i,
  input  [width-1:0] b_i,
  output [width:0] sum_o
);

  wire [width-1:0] temp_sum;
  wire [width:0] temp_c;
  
  assign temp_c[0] = 1'b1;
  
  genvar gi;
  generate
    for (gi=0; gi<width; gi=gi+1) begin: fas
	   fulladder fa (
                    .a(a_i[gi]),
                    .b(b_i[gi]),
                    .cin(temp_c[gi]),
                    .s(temp_sum[gi]),
                    .cout(temp_c[gi+1])
                  );
	end
  endgenerate
  
  assign sum_o= {temp_c[width],temp_sum};
endmodule



module mac #(
  parameter iwidth = 4,
  parameter swidth = 10
)(
  input clk, rstn,
  input  [iwidth-1:0] a_i,
  input  [iwidth-1:0] b_i,
  output [swidth-1:0] sum_o
);

  reg [swidth-1:0] sum_reg;
  wire [swidth-1:0] sum_w;

  always @ (posedge clk or negedge rstn) begin
    if (!rstn) sum_reg <= {swidth{1'b0}};
    else #(0.01) sum_reg <= sum_w;
  end

  assign sum_w = a_i * b_i + sum_reg;
  assign sum_o = sum_reg;
endmodule


module adder_tb;
    parameter inwidth=4;
    parameter outwidth=9;
    parameter delay = 5;

    reg [inwidth-1:0]   a,b;
    reg [outwidth-1:0]    result;
    reg check,clock=0,reset;
    wire [outwidth-1:0]    out;
    
  
    mac #(.iwidth(inwidth),.swidth(outwidth)) DUT (
                        .clk(clock),
			.rstn(reset),
			.a_i(a),
                        .b_i(b),
                        .sum_o(out)
                     );
	initial begin
		forever
		#(delay) clock<=~clock;

	end


    initial begin
	result<=0;
	reset<=0;
	#(delay) reset=1;
	
        forever begin
	@(posedge clock) begin
             a = $random % (2<<inwidth);
             b = $random % (2<<inwidth);
             result=a*b+out;
             #(1)
	     if (out == result) check=1'b1;
             else check=1'bX;
             end
             
        end
    end



endmodule
