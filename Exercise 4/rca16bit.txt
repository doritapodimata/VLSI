module rca_16
#(
  parameter width = 16
)(
  input  [width-1:0] a_i,
  input  [width-1:0] b_i,
  input clk,
  input rstn,
  output [width:0] sum_o
);

  wire [width-1:0] temp_sum;
  wire [width:0] temp_c;

  wire [width:0] result;

  reg [width-1:0] a_reg;
  reg [width-1:0] b_reg;
  reg [width:0] out_reg;

  always @(posedge clk or negedge rstn)begin
	if(rstn==0)begin
		a_reg<=0;
		b_reg<=0;
	end
	else begin
		a_reg<=a_i;
		b_reg<=b_i;
	end
end


  
  assign temp_c[0] = 1'b0;
  
  genvar gi;
  generate
    for (gi=0; gi<width; gi=gi+1) begin: fas
	   fulladder fa (
                    .a(a_reg[gi]),
                    .b(b_reg[gi]),
                    .cin(temp_c[gi]),
                    .s(temp_sum[gi]),
                    .cout(temp_c[gi+1])
                  );
	end
  endgenerate
  
  assign result= {temp_c[width],temp_sum};

always @(posedge clk or negedge rstn)begin
	if(rstn==0)
		out_reg<=0;
	else
	out_reg<=result;
end

assign sum_o = out_reg;


endmodule
